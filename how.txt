// add line-clamp in tailwind.config
// config tailwind inside src folder
// add domain in next.config fakestoreapi.com

///// header component
- flex grow let the flex item grow as much as it can flex-grow-0 means stop this behaviour and just take the space necessary 
- see what whitespace-norap is in utility section
- we apply a custom css to the utility div named as link so we configure tailwind component using the layers
- see what is inline in 
- see what is inline-flex in the buttom navbar


/////main element in index.just
- we set it as max-w-screen-2xl as after that the main will have white space both side if the component
-so to make the main element be on center as there will be white space , we give it a m-auto

///// Banner component  
- install react-responsive-carousal -it gives u a slideshow vala feel
- above carousal we have put a div element to give it a height and absolute positon with z index and a gradient for the blur effect from bottom
c

//// index.js 
- we ssr the products
- we first await ans fetch
- then we awaint and convert to json then we pass


////  productFeed component
- in here we use a product component as many times as there are total objects in the api using map 
- we pass the product the sub parts to and import it in as props
- make it grid-flow-row-dense ,  in this is an item is too big to fit in it goes to the second row but the space in above row will be filled with the rest items ie 123467895 ie 5 is big so goes to 2nd row and the rest(6,7,8,9) fit in 5th position
- we have used splice element to split the mapping and done mapping 2 times for different splice value


///// product
- for rating start we have have used raing value and used math.florr to round off
- then array.apply fill from null to the value that rating gives, then we use map to make as many starts as required
-self center center the items
- we have use line clamp in the description of product
- active class is given to button in global cssfor buttons

///// next auth 
- npm i next-auth
- create a auth folder in api folder, then inside auth create a dynamic folder -[...nextauth].js
- copy paste the nextauth sample code and change github to google
- make an env file for all the credentials
- go to firebase and get all the things
- in firebase see from video how to do , u ahve to register app then take the config codes
- create a firebase file and paste the config code in it
- now in firebase go to authentication and take google credentials

///// header 
- now import signin signout from next-auth/react
- use onclick to signin and then go to google cloud and see the env filefor futher proceedings
- now we get the sessions from the useSession() function 
- useSession gives us a session that when logged in we will get the name of the user,image that is logged in
- now in Name ke paragraph if there is a session then put hte logged in users name
- if session is there the make it signOut if not the make it signIn

//// _app.js
- now to enable us to access authentication on the whole app we go to docs and use sessionProvider of next-auth/react and wrap it around our app.js

//now we want another page for checkout so me make a file under pages folder named checkout
- import header

/////header
-we want when we click amazon logo we go to the home page, when we click cart we go to cart page, for this we use raouter


///// about- redux
4 topics- action- what to do, it is an oject that has a TYPE(increment) field, it is create by a function   
          ex - const incNum=(num)=>{
            return{
                type:"incrememnt"
                payload:num   - it is a number to increment
            }
          }

          reducer- how to do, it is a function that take action as an argument, a current state and return a  new state
          ex - 
          const initialState=0;
           const changeNUm=(state=initialState,action)=>{
            if(action.type==decrement){
                return state - action.payload
            }
            else if(ction.type===increment){
                return state + action.payload
            }
            else{
                return state
            }
           }
          Store- an object that stores all the state, it bring together the state,actions, and reducer, every reduc store has a single root reducer function,it is created using createStore() function,there can be only one store in whole redux application

          fuctions associated with stores - createStore(), dispatch(action),getState() - the only way to change the sate is to dispatch an action

///// create a redux folder in the main app folder , make a reducer, action folder and make a store.js
- npm i redux react-redux  @reduxjs/toolkt   
- under store import configureStore from toolkit, use configureStore to take reducers
- under app.js use Provider to wrap the whole application and take argument as store

/////reducer - basketSlice
import createSlice and just see the docs of redux toolkit

//// product  - info of dispatch is here
- now we implement the redux in the button, addToBasket
- now to push an item to that global store we need to dispatch an action, for this import useDispatch()
- now go to basketSlice and see how to take the dispatched actions


//// header 
- import a useSelector() from redux and give it the selectItems so as to access the items array of the store
- then do items.length in that span

//// checkout 
- in it map the items
- and with every map make a checkoutProduct 
- we have to use math.floor to get rating , and if no items are there it will show error if we try accessing array as no array in state, so we use try catch, if else doesnot work here

///// checkoutProduct
-addItem to state
-removeItem , in here we use the id as an object of the payload, see the details in the basketSlice

///// basketSlice
- we use selector to get our total that we export
- to calculate total we use reduce function
- it has a callback function that takes total and the items we loop through, and at the end we initialize the value of total
